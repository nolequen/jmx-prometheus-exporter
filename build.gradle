buildscript {

  repositories {
    jcenter()
  }
}

subprojects {
  ext {
    projectName = "jmx-prometheus-$project.name"
  }

  group 'su.nlq'
  version '0.8.0'

  apply plugin: 'java-library'
  apply plugin: 'maven'
  apply plugin: 'signing'

  sourceCompatibility = 1.8

  dependencies {
    implementation group: 'org.jetbrains', name: 'annotations', version: '18.0.0'
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30'
  }

  repositories {
    mavenCentral()
  }

  uploadArchives {
    repositories {
      mavenDeployer {
        beforeDeployment { final MavenDeployment deployment -> signing.signPom(deployment) }

        def user = project.hasProperty("ossrhUsername") ? ossrhUsername : ''
        def password = project.hasProperty("ossrhUsername") ? ossrhPassword : ''

        repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
          authentication(userName: user, password: password)
        }

        snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
          authentication(userName: user, password: password)
        }

        pom.project {
          name 'JMX Prometheus exporter'
          description 'Pipe for JMX MBeans to Prometheus '
          url 'https://github.com/nolequen/jmx-prometheus-exporter'
          licenses {
            license {
              name "The Apache Software License, Version 2.0"
              url "http://www.apache.org/licenses/LICENSE-2.0.txt"
              distribution 'repo'
            }
          }
          scm {
            url 'https://github.com/nolequen/jmx-prometheus-exporter'
            connection 'scm:git:git://github.com/nolequen/jmx-prometheus-exporter.git'
            developerConnection 'scm:git:ssh://github.com:nolequen/jmx-prometheus-exporter.git'
          }
          developers {
            developer {
              name "Nolequen"
              email "nolequen@gmail.com"
              url "http://www.nlq.su/"
            }
          }
        }
      }
    }
  }

  jar.baseName = projectName

  task sourcesJar(type: Jar, dependsOn: classes) {
    baseName = projectName
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  task javadocJar(type: Jar, dependsOn: javadoc) {
    baseName = projectName
    classifier = 'javadoc'
    from javadoc.destinationDir
  }

  artifacts {
    archives sourcesJar, javadocJar
  }

  signing {
    sign configurations.archives
  }
}